version: "3.7"

services:
   db:
      container_name: postgres
      image: postgres:15.2
      restart: always
      env_file:
         - .env
      environment:
         - POSTGRES_USER=${POSTGRES_USER:-root}
         - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
         - POSTGRES_DB=${POSTGRES_DB:-full-authorization}
      ports:
         - "${POSTGRES_PORT:-5432}:5432"
      volumes:
         - postgres_data:/var/lib/postgresql/data
      networks:
         - backend

   redis:
      container_name: redis
      image: redis:latest
      restart: always
      env_file:
         - .env
      ports:
         - "${REDIS_PORT:-6379}:6379"
      environment:
         - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
      command: redis-server --requirepass ${REDIS_PASSWORD:-password}
      volumes:
         - redis_data:/data
      networks:
         - backend

   backend:
      container_name: nestjs_app
      build:
         context: ./nest.js-server
         dockerfile: Dockerfile
      restart: always
      env_file:
         - .env
      environment:
         - POSTGRES_URI=${POSTGRES_URI:-postgresql://root:password@db:5432/full-authorization}
      ports:
         - "${APPLICATION_PORT:-4000}:4000"
      depends_on:
         - db
         - redis
      volumes:
         - ./nest.js-server:/usr/src/backend
         - /usr/src/backend/node_modules
      networks:
         - backend
      command: >
         sh -c "npx prisma db push --accept-data-loss && npm run start:dev"

   frontend:
      container_name: nextjs_app
      build:
         context: ./next.js-client
         dockerfile: Dockerfile
      restart: always
      env_file:
         - .env
      ports:
         - "${FRONTEND_PORT:-3000}:3000"
      volumes:
         - ./next.js-client:/usr/src/next.js-client
         - /usr/src/next.js-client/node_modules
         - /usr/src/next.js-client/.next
      networks:
         - backend
      depends_on:
         - backend

volumes:
   postgres_data:
   redis_data:

networks:
   backend:
